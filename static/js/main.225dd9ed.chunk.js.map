{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","action.js","constants.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","filteredRobots","filter","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","isPending","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.225dd9ed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const { name, email, id} = props;\r\n    return (\r\n        <div className='tc bg-light-red dib br3 pa3 ma2 grow bw2 shadow-3'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?150x150`}/>\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) =>{\r\n    const cardComponent = robots.map((user, i) => {\r\n        return (<Card \r\n        key={i}\r\n        id={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email}/>\r\n    );\r\n})\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n        <input \r\n        className='pa3 ba b--black bg-lightest-blue opac br4' \r\n        type='search' \r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n         />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '75rem'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../Components/CardList';\r\n// import { robots } from './robots';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport { setSearchField, requestRobots } from '../action';\r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    // constructor() {\r\n    //     super()\r\n    //     this.state = {   \r\n    //         robots: []\r\n    //     }\r\n    // }\r\n    componentDidMount() {\r\n       this.props.onRequestRobots();\r\n        \r\n    }\r\n    // onSearchChange = (event) => {\r\n    //     this.setState({searchfield: event.target.value})\r\n    // } <----- Not required due to connect\r\n    render () {\r\n        const {searchField, robots, onSearchChange} = this.props;\r\n        const filteredRobots = robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n    return (\r\n        <div className='tc'>\r\n        <h1>RobotFriends</h1>\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n        <CardList robots={filteredRobots}/>\r\n        </Scroll>\r\n        </div>\r\n    );}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch)  => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case  CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField:action.payload});\r\n        default:\r\n            return state;    \r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducer';\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n    <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}